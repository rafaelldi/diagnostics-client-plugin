//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.10.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace DiagnosticsClientPlugin.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:10</p>
  /// </summary>
  public class DiagnosticsHostModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public DiagnosticsClientPlugin.Generated.ProcessList ProcessList {get; private set;}
    [NotNull] public IViewableList<int> CounterCollectionSessions => _CounterCollectionSessions;
    [NotNull] public IViewableMap<int, CountersMonitoringSession> CounterMonitoringSessions => _CounterMonitoringSessions;
    [NotNull] public IViewableList<int> TraceCollectionSessions => _TraceCollectionSessions;
    [NotNull] public IRdEndpoint<CollectDumpCommand, DumpCollectionResult> CollectDump => _CollectDump;
    [NotNull] public IRdEndpoint<CollectCountersCommand, Unit> CollectCounters => _CollectCounters;
    [NotNull] public IRdEndpoint<MonitorCountersCommand, Unit> MonitorCounters => _MonitorCounters;
    [NotNull] public IRdEndpoint<CollectTracesCommand, Unit> CollectTraces => _CollectTraces;
    
    //private fields
    [NotNull] private readonly RdList<int> _CounterCollectionSessions;
    [NotNull] private readonly RdMap<int, CountersMonitoringSession> _CounterMonitoringSessions;
    [NotNull] private readonly RdList<int> _TraceCollectionSessions;
    [NotNull] private readonly RdCall<CollectDumpCommand, DumpCollectionResult> _CollectDump;
    [NotNull] private readonly RdCall<CollectCountersCommand, Unit> _CollectCounters;
    [NotNull] private readonly RdCall<MonitorCountersCommand, Unit> _MonitorCounters;
    [NotNull] private readonly RdCall<CollectTracesCommand, Unit> _CollectTraces;
    
    //primary constructor
    private DiagnosticsHostModel(
      [NotNull] DiagnosticsClientPlugin.Generated.ProcessList processList,
      [NotNull] RdList<int> counterCollectionSessions,
      [NotNull] RdMap<int, CountersMonitoringSession> counterMonitoringSessions,
      [NotNull] RdList<int> traceCollectionSessions,
      [NotNull] RdCall<CollectDumpCommand, DumpCollectionResult> collectDump,
      [NotNull] RdCall<CollectCountersCommand, Unit> collectCounters,
      [NotNull] RdCall<MonitorCountersCommand, Unit> monitorCounters,
      [NotNull] RdCall<CollectTracesCommand, Unit> collectTraces
    )
    {
      if (processList == null) throw new ArgumentNullException("processList");
      if (counterCollectionSessions == null) throw new ArgumentNullException("counterCollectionSessions");
      if (counterMonitoringSessions == null) throw new ArgumentNullException("counterMonitoringSessions");
      if (traceCollectionSessions == null) throw new ArgumentNullException("traceCollectionSessions");
      if (collectDump == null) throw new ArgumentNullException("collectDump");
      if (collectCounters == null) throw new ArgumentNullException("collectCounters");
      if (monitorCounters == null) throw new ArgumentNullException("monitorCounters");
      if (collectTraces == null) throw new ArgumentNullException("collectTraces");
      
      ProcessList = processList;
      _CounterCollectionSessions = counterCollectionSessions;
      _CounterMonitoringSessions = counterMonitoringSessions;
      _TraceCollectionSessions = traceCollectionSessions;
      _CollectDump = collectDump;
      _CollectCounters = collectCounters;
      _MonitorCounters = monitorCounters;
      _CollectTraces = collectTraces;
      _CounterCollectionSessions.OptimizeNested = true;
      _TraceCollectionSessions.OptimizeNested = true;
      _CounterCollectionSessions.Async = true;
      _CounterMonitoringSessions.Async = true;
      _TraceCollectionSessions.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("processList", ProcessList));
      BindableChildren.Add(new KeyValuePair<string, object>("counterCollectionSessions", _CounterCollectionSessions));
      BindableChildren.Add(new KeyValuePair<string, object>("counterMonitoringSessions", _CounterMonitoringSessions));
      BindableChildren.Add(new KeyValuePair<string, object>("traceCollectionSessions", _TraceCollectionSessions));
      BindableChildren.Add(new KeyValuePair<string, object>("collectDump", _CollectDump));
      BindableChildren.Add(new KeyValuePair<string, object>("collectCounters", _CollectCounters));
      BindableChildren.Add(new KeyValuePair<string, object>("monitorCounters", _MonitorCounters));
      BindableChildren.Add(new KeyValuePair<string, object>("collectTraces", _CollectTraces));
    }
    //secondary constructor
    internal DiagnosticsHostModel (
    ) : this (
      new DiagnosticsClientPlugin.Generated.ProcessList(),
      new RdList<int>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt),
      new RdMap<int, CountersMonitoringSession>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt, CountersMonitoringSession.Read, CountersMonitoringSession.Write),
      new RdList<int>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt),
      new RdCall<CollectDumpCommand, DumpCollectionResult>(CollectDumpCommand.Read, CollectDumpCommand.Write, DumpCollectionResult.Read, DumpCollectionResult.Write),
      new RdCall<CollectCountersCommand, Unit>(CollectCountersCommand.Read, CollectCountersCommand.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<MonitorCountersCommand, Unit>(MonitorCountersCommand.Read, MonitorCountersCommand.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<CollectTracesCommand, Unit>(CollectTracesCommand.Read, CollectTracesCommand.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 5936015768702099124L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("DiagnosticsHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("processList = "); ProcessList.PrintEx(printer); printer.Println();
        printer.Print("counterCollectionSessions = "); _CounterCollectionSessions.PrintEx(printer); printer.Println();
        printer.Print("counterMonitoringSessions = "); _CounterMonitoringSessions.PrintEx(printer); printer.Println();
        printer.Print("traceCollectionSessions = "); _TraceCollectionSessions.PrintEx(printer); printer.Println();
        printer.Print("collectDump = "); _CollectDump.PrintEx(printer); printer.Println();
        printer.Print("collectCounters = "); _CollectCounters.PrintEx(printer); printer.Println();
        printer.Print("monitorCounters = "); _MonitorCounters.PrintEx(printer); printer.Println();
        printer.Print("collectTraces = "); _CollectTraces.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionDiagnosticsHostModelEx
   {
    public static DiagnosticsHostModel GetDiagnosticsHostModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("diagnosticsHostModel", () => new DiagnosticsHostModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:65</p>
  /// </summary>
  public sealed class CollectCountersCommand : IPrintable, IEquatable<CollectCountersCommand>
  {
    //fields
    //public fields
    public int Pid {get; private set;}
    [NotNull] public string FilePath {get; private set;}
    public CounterFileFormat Format {get; private set;}
    public int RefreshInterval {get; private set;}
    [NotNull] public string Providers {get; private set;}
    [CanBeNull] public int? Duration {get; private set;}
    
    //private fields
    //primary constructor
    public CollectCountersCommand(
      int pid,
      [NotNull] string filePath,
      CounterFileFormat format,
      int refreshInterval,
      [NotNull] string providers,
      [CanBeNull] int? duration
    )
    {
      if (filePath == null) throw new ArgumentNullException("filePath");
      if (providers == null) throw new ArgumentNullException("providers");
      
      Pid = pid;
      FilePath = filePath;
      Format = format;
      RefreshInterval = refreshInterval;
      Providers = providers;
      Duration = duration;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int pid, [NotNull] out string filePath, out CounterFileFormat format, out int refreshInterval, [NotNull] out string providers, [CanBeNull] out int? duration)
    {
      pid = Pid;
      filePath = FilePath;
      format = Format;
      refreshInterval = RefreshInterval;
      providers = Providers;
      duration = Duration;
    }
    //statics
    
    public static CtxReadDelegate<CollectCountersCommand> Read = (ctx, reader) => 
    {
      var pid = reader.ReadInt();
      var filePath = reader.ReadString();
      var format = (CounterFileFormat)reader.ReadInt();
      var refreshInterval = reader.ReadInt();
      var providers = reader.ReadString();
      var duration = ReadIntNullable(ctx, reader);
      var _result = new CollectCountersCommand(pid, filePath, format, refreshInterval, providers, duration);
      return _result;
    };
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static CtxWriteDelegate<CollectCountersCommand> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Pid);
      writer.Write(value.FilePath);
      writer.Write((int)value.Format);
      writer.Write(value.RefreshInterval);
      writer.Write(value.Providers);
      WriteIntNullable(ctx, writer, value.Duration);
    };
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CollectCountersCommand) obj);
    }
    public bool Equals(CollectCountersCommand other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Pid == other.Pid && FilePath == other.FilePath && Format == other.Format && RefreshInterval == other.RefreshInterval && Providers == other.Providers && Equals(Duration, other.Duration);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Pid.GetHashCode();
        hash = hash * 31 + FilePath.GetHashCode();
        hash = hash * 31 + (int) Format;
        hash = hash * 31 + RefreshInterval.GetHashCode();
        hash = hash * 31 + Providers.GetHashCode();
        hash = hash * 31 + (Duration != null ? Duration.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CollectCountersCommand (");
      using (printer.IndentCookie()) {
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
        printer.Print("format = "); Format.PrintEx(printer); printer.Println();
        printer.Print("refreshInterval = "); RefreshInterval.PrintEx(printer); printer.Println();
        printer.Print("providers = "); Providers.PrintEx(printer); printer.Println();
        printer.Print("duration = "); Duration.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:48</p>
  /// </summary>
  public sealed class CollectDumpCommand : IPrintable, IEquatable<CollectDumpCommand>
  {
    //fields
    //public fields
    public int Pid {get; private set;}
    public DumpType Type {get; private set;}
    [NotNull] public string OutFolder {get; private set;}
    [NotNull] public string Filename {get; private set;}
    public bool Diag {get; private set;}
    
    //private fields
    //primary constructor
    public CollectDumpCommand(
      int pid,
      DumpType type,
      [NotNull] string outFolder,
      [NotNull] string filename,
      bool diag
    )
    {
      if (outFolder == null) throw new ArgumentNullException("outFolder");
      if (filename == null) throw new ArgumentNullException("filename");
      
      Pid = pid;
      Type = type;
      OutFolder = outFolder;
      Filename = filename;
      Diag = diag;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int pid, out DumpType type, [NotNull] out string outFolder, [NotNull] out string filename, out bool diag)
    {
      pid = Pid;
      type = Type;
      outFolder = OutFolder;
      filename = Filename;
      diag = Diag;
    }
    //statics
    
    public static CtxReadDelegate<CollectDumpCommand> Read = (ctx, reader) => 
    {
      var pid = reader.ReadInt();
      var type = (DumpType)reader.ReadInt();
      var outFolder = reader.ReadString();
      var filename = reader.ReadString();
      var diag = reader.ReadBool();
      var _result = new CollectDumpCommand(pid, type, outFolder, filename, diag);
      return _result;
    };
    
    public static CtxWriteDelegate<CollectDumpCommand> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Pid);
      writer.Write((int)value.Type);
      writer.Write(value.OutFolder);
      writer.Write(value.Filename);
      writer.Write(value.Diag);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CollectDumpCommand) obj);
    }
    public bool Equals(CollectDumpCommand other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Pid == other.Pid && Type == other.Type && OutFolder == other.OutFolder && Filename == other.Filename && Diag == other.Diag;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Pid.GetHashCode();
        hash = hash * 31 + (int) Type;
        hash = hash * 31 + OutFolder.GetHashCode();
        hash = hash * 31 + Filename.GetHashCode();
        hash = hash * 31 + Diag.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CollectDumpCommand (");
      using (printer.IndentCookie()) {
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
        printer.Print("type = "); Type.PrintEx(printer); printer.Println();
        printer.Print("outFolder = "); OutFolder.PrintEx(printer); printer.Println();
        printer.Print("filename = "); Filename.PrintEx(printer); printer.Println();
        printer.Print("diag = "); Diag.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:92</p>
  /// </summary>
  public sealed class CollectTracesCommand : IPrintable, IEquatable<CollectTracesCommand>
  {
    //fields
    //public fields
    public int Pid {get; private set;}
    [NotNull] public string FilePath {get; private set;}
    [CanBeNull] public int? Duration {get; private set;}
    
    //private fields
    //primary constructor
    public CollectTracesCommand(
      int pid,
      [NotNull] string filePath,
      [CanBeNull] int? duration
    )
    {
      if (filePath == null) throw new ArgumentNullException("filePath");
      
      Pid = pid;
      FilePath = filePath;
      Duration = duration;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int pid, [NotNull] out string filePath, [CanBeNull] out int? duration)
    {
      pid = Pid;
      filePath = FilePath;
      duration = Duration;
    }
    //statics
    
    public static CtxReadDelegate<CollectTracesCommand> Read = (ctx, reader) => 
    {
      var pid = reader.ReadInt();
      var filePath = reader.ReadString();
      var duration = ReadIntNullable(ctx, reader);
      var _result = new CollectTracesCommand(pid, filePath, duration);
      return _result;
    };
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static CtxWriteDelegate<CollectTracesCommand> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Pid);
      writer.Write(value.FilePath);
      WriteIntNullable(ctx, writer, value.Duration);
    };
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CollectTracesCommand) obj);
    }
    public bool Equals(CollectTracesCommand other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Pid == other.Pid && FilePath == other.FilePath && Equals(Duration, other.Duration);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Pid.GetHashCode();
        hash = hash * 31 + FilePath.GetHashCode();
        hash = hash * 31 + (Duration != null ? Duration.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CollectTracesCommand (");
      using (printer.IndentCookie()) {
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
        printer.Print("duration = "); Duration.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:33</p>
  /// </summary>
  public sealed class Counter : IPrintable, IEquatable<Counter>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public double Value {get; private set;}
    
    //private fields
    //primary constructor
    public Counter(
      [NotNull] string name,
      double value
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out double value)
    {
      name = Name;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<Counter> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var value = reader.ReadDouble();
      var _result = new Counter(name, value);
      return _result;
    };
    
    public static CtxWriteDelegate<Counter> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((Counter) obj);
    }
    public bool Equals(Counter other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("Counter (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:68</p>
  /// </summary>
  public enum CounterFileFormat {
    Csv,
    Json
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:24</p>
  /// </summary>
  public sealed class CountersMonitoringSession : RdBindableBase
  {
    //fields
    //public fields
    public int Pid {get; private set;}
    [NotNull] public IViewableProperty<bool> Active => _Active;
    [NotNull] public IViewableMap<string, Counter> Counters => _Counters;
    [NotNull] public IRdEndpoint<int?, Unit> Monitor => _Monitor;
    [NotNull] public ISignal<Unit> Close => _Close;
    
    //private fields
    [NotNull] private readonly RdProperty<bool> _Active;
    [NotNull] private readonly RdMap<string, Counter> _Counters;
    [NotNull] private readonly RdCall<int?, Unit> _Monitor;
    [NotNull] private readonly RdSignal<Unit> _Close;
    
    //primary constructor
    private CountersMonitoringSession(
      int pid,
      [NotNull] RdProperty<bool> active,
      [NotNull] RdMap<string, Counter> counters,
      [NotNull] RdCall<int?, Unit> monitor,
      [NotNull] RdSignal<Unit> close
    )
    {
      if (active == null) throw new ArgumentNullException("active");
      if (counters == null) throw new ArgumentNullException("counters");
      if (monitor == null) throw new ArgumentNullException("monitor");
      if (close == null) throw new ArgumentNullException("close");
      
      Pid = pid;
      _Active = active;
      _Counters = counters;
      _Monitor = monitor;
      _Close = close;
      _Active.OptimizeNested = true;
      _Counters.OptimizeNested = true;
      _Active.Async = true;
      _Counters.Async = true;
      _Close.Async = true;
      _Monitor.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("active", _Active));
      BindableChildren.Add(new KeyValuePair<string, object>("counters", _Counters));
      BindableChildren.Add(new KeyValuePair<string, object>("monitor", _Monitor));
      BindableChildren.Add(new KeyValuePair<string, object>("close", _Close));
    }
    //secondary constructor
    public CountersMonitoringSession (
      int pid
    ) : this (
      pid,
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool),
      new RdMap<string, Counter>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, Counter.Read, Counter.Write),
      new RdCall<int?, Unit>(ReadIntNullable, WriteIntNullable, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<CountersMonitoringSession> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var pid = reader.ReadInt();
      var active = RdProperty<bool>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool);
      var counters = RdMap<string, Counter>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, Counter.Read, Counter.Write);
      var monitor = RdCall<int?, Unit>.Read(ctx, reader, ReadIntNullable, WriteIntNullable, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid);
      var close = RdSignal<Unit>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid);
      var _result = new CountersMonitoringSession(pid, active, counters, monitor, close).WithId(_id);
      return _result;
    };
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static CtxWriteDelegate<CountersMonitoringSession> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.Pid);
      RdProperty<bool>.Write(ctx, writer, value._Active);
      RdMap<string, Counter>.Write(ctx, writer, value._Counters);
      RdCall<int?, Unit>.Write(ctx, writer, value._Monitor);
      RdSignal<Unit>.Write(ctx, writer, value._Close);
    };
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("CountersMonitoringSession (");
      using (printer.IndentCookie()) {
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
        printer.Print("active = "); _Active.PrintEx(printer); printer.Println();
        printer.Print("counters = "); _Counters.PrintEx(printer); printer.Println();
        printer.Print("monitor = "); _Monitor.PrintEx(printer); printer.Println();
        printer.Print("close = "); _Close.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:59</p>
  /// </summary>
  public sealed class DumpCollectionResult : IPrintable, IEquatable<DumpCollectionResult>
  {
    //fields
    //public fields
    [NotNull] public string FilePath {get; private set;}
    
    //private fields
    //primary constructor
    public DumpCollectionResult(
      [NotNull] string filePath
    )
    {
      if (filePath == null) throw new ArgumentNullException("filePath");
      
      FilePath = filePath;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string filePath)
    {
      filePath = FilePath;
    }
    //statics
    
    public static CtxReadDelegate<DumpCollectionResult> Read = (ctx, reader) => 
    {
      var filePath = reader.ReadString();
      var _result = new DumpCollectionResult(filePath);
      return _result;
    };
    
    public static CtxWriteDelegate<DumpCollectionResult> Write = (ctx, writer, value) => 
    {
      writer.Write(value.FilePath);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DumpCollectionResult) obj);
    }
    public bool Equals(DumpCollectionResult other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return FilePath == other.FilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + FilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DumpCollectionResult (");
      using (printer.IndentCookie()) {
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:50</p>
  /// </summary>
  public enum DumpType {
    Full,
    Heap,
    Triage,
    Mini
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:81</p>
  /// </summary>
  public sealed class MonitorCountersCommand : IPrintable, IEquatable<MonitorCountersCommand>
  {
    //fields
    //public fields
    public int Pid {get; private set;}
    public int RefreshInterval {get; private set;}
    [NotNull] public string Providers {get; private set;}
    [CanBeNull] public int? Duration {get; private set;}
    
    //private fields
    //primary constructor
    public MonitorCountersCommand(
      int pid,
      int refreshInterval,
      [NotNull] string providers,
      [CanBeNull] int? duration
    )
    {
      if (providers == null) throw new ArgumentNullException("providers");
      
      Pid = pid;
      RefreshInterval = refreshInterval;
      Providers = providers;
      Duration = duration;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int pid, out int refreshInterval, [NotNull] out string providers, [CanBeNull] out int? duration)
    {
      pid = Pid;
      refreshInterval = RefreshInterval;
      providers = Providers;
      duration = Duration;
    }
    //statics
    
    public static CtxReadDelegate<MonitorCountersCommand> Read = (ctx, reader) => 
    {
      var pid = reader.ReadInt();
      var refreshInterval = reader.ReadInt();
      var providers = reader.ReadString();
      var duration = ReadIntNullable(ctx, reader);
      var _result = new MonitorCountersCommand(pid, refreshInterval, providers, duration);
      return _result;
    };
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static CtxWriteDelegate<MonitorCountersCommand> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Pid);
      writer.Write(value.RefreshInterval);
      writer.Write(value.Providers);
      WriteIntNullable(ctx, writer, value.Duration);
    };
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MonitorCountersCommand) obj);
    }
    public bool Equals(MonitorCountersCommand other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Pid == other.Pid && RefreshInterval == other.RefreshInterval && Providers == other.Providers && Equals(Duration, other.Duration);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Pid.GetHashCode();
        hash = hash * 31 + RefreshInterval.GetHashCode();
        hash = hash * 31 + Providers.GetHashCode();
        hash = hash * 31 + (Duration != null ? Duration.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MonitorCountersCommand (");
      using (printer.IndentCookie()) {
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
        printer.Print("refreshInterval = "); RefreshInterval.PrintEx(printer); printer.Println();
        printer.Print("providers = "); Providers.PrintEx(printer); printer.Println();
        printer.Print("duration = "); Duration.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:11</p>
  /// </summary>
  public sealed class ProcessInfo : IPrintable, IEquatable<ProcessInfo>
  {
    //fields
    //public fields
    public int ProcessId {get; private set;}
    [NotNull] public string ProcessName {get; private set;}
    [CanBeNull] public string Filename {get; private set;}
    [CanBeNull] public string StartTime {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessInfo(
      int processId,
      [NotNull] string processName,
      [CanBeNull] string filename,
      [CanBeNull] string startTime
    )
    {
      if (processName == null) throw new ArgumentNullException("processName");
      
      ProcessId = processId;
      ProcessName = processName;
      Filename = filename;
      StartTime = startTime;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int processId, [NotNull] out string processName, [CanBeNull] out string filename, [CanBeNull] out string startTime)
    {
      processId = ProcessId;
      processName = ProcessName;
      filename = Filename;
      startTime = StartTime;
    }
    //statics
    
    public static CtxReadDelegate<ProcessInfo> Read = (ctx, reader) => 
    {
      var processId = reader.ReadInt();
      var processName = reader.ReadString();
      var filename = ReadStringNullable(ctx, reader);
      var startTime = ReadStringNullable(ctx, reader);
      var _result = new ProcessInfo(processId, processName, filename, startTime);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<ProcessInfo> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProcessId);
      writer.Write(value.ProcessName);
      WriteStringNullable(ctx, writer, value.Filename);
      WriteStringNullable(ctx, writer, value.StartTime);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessInfo) obj);
    }
    public bool Equals(ProcessInfo other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProcessId == other.ProcessId && ProcessName == other.ProcessName && Equals(Filename, other.Filename) && Equals(StartTime, other.StartTime);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProcessId.GetHashCode();
        hash = hash * 31 + ProcessName.GetHashCode();
        hash = hash * 31 + (Filename != null ? Filename.GetHashCode() : 0);
        hash = hash * 31 + (StartTime != null ? StartTime.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessInfo (");
      using (printer.IndentCookie()) {
        printer.Print("processId = "); ProcessId.PrintEx(printer); printer.Println();
        printer.Print("processName = "); ProcessName.PrintEx(printer); printer.Println();
        printer.Print("filename = "); Filename.PrintEx(printer); printer.Println();
        printer.Print("startTime = "); StartTime.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: DiagnosticsHostModel.kt:18</p>
  /// </summary>
  public sealed class ProcessList : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableList<ProcessInfo> Items => _Items;
    [NotNull] public IViewableProperty<int?> Selected => _Selected;
    [NotNull] public ISource<Unit> Refresh => _Refresh;
    
    //private fields
    [NotNull] private readonly RdList<ProcessInfo> _Items;
    [NotNull] private readonly RdProperty<int?> _Selected;
    [NotNull] private readonly RdSignal<Unit> _Refresh;
    
    //primary constructor
    private ProcessList(
      [NotNull] RdList<ProcessInfo> items,
      [NotNull] RdProperty<int?> selected,
      [NotNull] RdSignal<Unit> refresh
    )
    {
      if (items == null) throw new ArgumentNullException("items");
      if (selected == null) throw new ArgumentNullException("selected");
      if (refresh == null) throw new ArgumentNullException("refresh");
      
      _Items = items;
      _Selected = selected;
      _Refresh = refresh;
      _Items.OptimizeNested = true;
      _Selected.OptimizeNested = true;
      _Selected.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("items", _Items));
      BindableChildren.Add(new KeyValuePair<string, object>("selected", _Selected));
      BindableChildren.Add(new KeyValuePair<string, object>("refresh", _Refresh));
    }
    //secondary constructor
    public ProcessList (
    ) : this (
      new RdList<ProcessInfo>(ProcessInfo.Read, ProcessInfo.Write),
      new RdProperty<int?>(ReadIntNullable, WriteIntNullable),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ProcessList> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var items = RdList<ProcessInfo>.Read(ctx, reader, ProcessInfo.Read, ProcessInfo.Write);
      var selected = RdProperty<int?>.Read(ctx, reader, ReadIntNullable, WriteIntNullable);
      var refresh = RdSignal<Unit>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid);
      var _result = new ProcessList(items, selected, refresh).WithId(_id);
      return _result;
    };
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static CtxWriteDelegate<ProcessList> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdList<ProcessInfo>.Write(ctx, writer, value._Items);
      RdProperty<int?>.Write(ctx, writer, value._Selected);
      RdSignal<Unit>.Write(ctx, writer, value._Refresh);
    };
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessList (");
      using (printer.IndentCookie()) {
        printer.Print("items = "); _Items.PrintEx(printer); printer.Println();
        printer.Print("selected = "); _Selected.PrintEx(printer); printer.Println();
        printer.Print("refresh = "); _Refresh.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
